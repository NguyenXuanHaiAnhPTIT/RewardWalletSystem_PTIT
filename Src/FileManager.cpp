#include "../Include/FileManager.h"
#include <fstream>
#include <iostream>
#include <filesystem>
using namespace std;

namespace fs = std::filesystem;

/*
    Constructor mặc định, không có tham số
*/
FileManager::FileManager() {}

/*
    Tạo thư mục nếu chưa tồn tại để lưu dữ liệu.
*/
void FileManager::createFolderIfNotExists(const string& path) {
    if (!fs::exists(path)) {
        fs::create_directories(path);
    }
}

// ==================== Quản lý User =========================

/*
    Lưu thông tin tài khoản User vào file riêng.
    Đường dẫn: Data/User/username.dat
*/
bool FileManager::saveUser(const UserAccount& user) {
    createFolderIfNotExists("Data/User");
    string filename = "Data/User/" + user.username + ".dat";
    ofstream fout(filename);
    if (!fout) return false;

    fout << user.username << endl;
    fout << user.hashedPassword << endl;
    fout << user.fullName << endl;
    fout << user.email << endl;
    fout << user.phone << endl;
    fout << user.isAdmin << endl;
    fout << user.isLocked << endl;
    fout << user.isPasswordAutoGenerated << endl;
    fout.close();
    return true;
}

/*
    Đọc thông tin tài khoản User từ file theo username.
*/
bool FileManager::loadUser(const string& username, UserAccount& user) {
    string filename = "Data/User/" + username + ".dat";
    ifstream fin(filename);
    if (!fin) return false;

    getline(fin, user.username);
    getline(fin, user.hashedPassword);
    getline(fin, user.fullName);
    getline(fin, user.email);
    getline(fin, user.phone);
    fin >> user.isAdmin;
    fin >> user.isLocked;
    fin >> user.isPasswordAutoGenerated;
    fin.close();
    return true;
}

/*
    Đọc toàn bộ user trong thư mục Data/User.
    Bỏ qua các file ví (_wallet).
*/
vector<UserAccount> FileManager::loadAllUsers() {
    vector<UserAccount> users;
    createFolderIfNotExists("Data/User");
    for (const auto& entry : fs::directory_iterator("Data/User")) {
        if (entry.is_regular_file()) {
            UserAccount user;
            string filename = entry.path().stem().string();
            if (filename.find("_wallet") != string::npos) continue;  // Bỏ file ví
            if (loadUser(filename, user)) {
                users.push_back(user);
            }
        }
    }
    return users;
}

// ==================== Quản lý Wallet =========================

/*
    Lưu dữ liệu ví vào file Data/User/username_wallet.dat
*/
bool FileManager::saveWallet(const Wallet& wallet) {
    createFolderIfNotExists("Data/User");
    string filename = "Data/User/" + wallet.owner + "_wallet.dat";
    if (wallet.owner == "master") filename = "Data/User/master_wallet.dat";
    ofstream fout(filename);
    if (!fout) return false;
    fout << wallet.walletID << endl;
    fout << wallet.owner << endl;
    fout << wallet.balance << endl;
    fout.close();
    return true;
}
/*
    Đọc dữ liệu ví theo username
*/
bool FileManager::loadWallet(const string& username, Wallet& wallet) {
    string filename = "Data/User/" + username + "_wallet.dat";
    if (username == "master") filename = "Data/User/master_wallet.dat";
    ifstream fin(filename);
    if (!fin) return false;
    getline(fin, wallet.walletID);
    getline(fin, wallet.owner);
    fin >> wallet.balance;
    fin.close();
    return true;
}

// ==================== Quản lý Transaction =========================

/*
    Lưu 1 giao dịch vào file log (append)
    Đường dẫn: Data/transaction_log/transaction_log.txt
*/
bool FileManager::saveTransaction(const Transaction& t) {
    createFolderIfNotExists("Data/transaction_log");
    ofstream fout("Data/transaction_log/transaction_log.txt", ios::app);
    if (!fout) return false;

    fout << t.transactionID << "," << t.fromUser << "," << t.toUser << ","
        << t.amount << "," << t.timeStamp << "," << t.status << "," << t.note << endl;
    fout.close();
    return true;
}

/*
    Đọc toàn bộ lịch sử giao dịch
*/
vector<Transaction> FileManager::loadAllTransactions() {
    vector<Transaction> txs;
    createFolderIfNotExists("Data/transaction_log");
    ifstream fin("Data/transaction_log/transaction_log.txt");
    if (!fin) return txs;

    string line;
    while (getline(fin, line)) {
        Transaction t;
        size_t pos = 0, prev = 0;
        vector<string> tokens;
        while ((pos = line.find(',', prev)) != string::npos) {
            tokens.push_back(line.substr(prev, pos - prev));
            prev = pos + 1;
        }
        tokens.push_back(line.substr(prev));
        if (tokens.size() >= 7) {
            t.transactionID = tokens[0];
            t.fromUser = tokens[1];
            t.toUser = tokens[2];
            t.amount = stoll(tokens[3]);
            t.timeStamp = tokens[4];
            t.status = tokens[5];
            t.note = tokens[6];
            txs.push_back(t);
        }
    }
    fin.close();
    return txs;
}

// ==================== Backup và Restore dữ liệu =========================

/*
    Sao lưu dữ liệu User và transaction_log sang thư mục Data/backup
*/
bool FileManager::backupData() {
    createFolderIfNotExists("Data/backup");
    try {
        fs::remove_all("Data/backup/User");
        fs::remove_all("Data/backup/transaction_log");

        if (fs::exists("Data/User"))
            fs::copy("Data/User", "Data/backup/User", fs::copy_options::recursive);
        if (fs::exists("Data/transaction_log"))
            fs::copy("Data/transaction_log", "Data/backup/transaction_log", fs::copy_options::recursive);

        return true;
    }
    catch (...) {
        return false;
    }
}

/*
    Phục hồi dữ liệu từ thư mục backup sang thư mục Data chính
*/
bool FileManager::restoreBackup() {
    try {
        if (fs::exists("Data/backup/User")) {
            fs::remove_all("Data/User");
            fs::copy("Data/backup/User", "Data/User", fs::copy_options::recursive);
        }
        if (fs::exists("Data/backup/transaction_log")) {
            fs::remove_all("Data/transaction_log");
            fs::copy("Data/backup/transaction_log", "Data/transaction_log", fs::copy_options::recursive);
        }
        return true;
    }
    catch (...) {
        return false;
    }
}
